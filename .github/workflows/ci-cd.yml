name: ApliKasir Backend CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    name: Continuous Integration & Testing
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: aplikasir_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with: { node-version: '20' }
      - run: npm install
      
      # Create Firebase service account key from secrets
      - name: Create Firebase Service Account Key
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > serviceAccountKey.json
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
      
      # Setup database schema
      - name: Setup Database
        run: |
          mysql -h127.0.0.1 -uroot -ptestpassword < database/schema.sql
        env:
          MYSQL_PWD: testpassword
        # Start the server in background
      - name: Start Server
        run: |
          npm start &
          echo $! > server.pid
        env:
          PORT: 3000
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: testpassword
          DB_NAME: aplikasir_db
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_BUCKET_NAME: ${{ secrets.FIREBASE_BUCKET_NAME }}
          GOOGLE_APPLICATION_CREDENTIALS: ./serviceAccountKey.json
          
      # Wait for server to be ready
      - name: Wait for Server to Start
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000/; do sleep 1; done'
            # Install Newman and run API tests
      - name: Run Newman Tests
        run: |
          npm install -g newman
          newman run "ApliKasir_API_Collection.json" --environment "postman_environment.json" --reporters cli,json --reporter-json-export newman-results.json
        continue-on-error: true
            # Cleanup: Stop the server
      - name: Stop Server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          
      # Cleanup: Remove Firebase service account key
      - name: Cleanup Firebase Key
        if: always()
        run: |
          if [ -f serviceAccountKey.json ]; then
            rm serviceAccountKey.json
          fi

  sonar-scan:
    name: Continous Inspection dengan SonarQube
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      - uses: actions/checkout@v2
        with: { fetch-depth: 0 }
      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=ApliKasir-Codebase_ApliKasir-Backend
            -Dsonar.organization=aplikasir-codebase
          projectBaseDir: .
  docker-build-and-push:
    name: Bangun Docker Image dan Push ke Docker Hub
    runs-on: ubuntu-latest
    needs: [build-and-test, sonar-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      
      # Create Firebase service account key for Docker build
      - name: Create Firebase Service Account Key for Docker
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > serviceAccountKey.json
      
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: hshinosa/aplikasir-backend:latest

  deploy-to-vps:
    name: Deploy ke VPS
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Deploy ke VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            cd ~/aplikasir-backend
            docker pull hshinosa/aplikasir-backend:latest
            docker-compose up -d --force-recreate